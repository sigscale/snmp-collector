@copyright 2018 SigScale Global Inc.
@version %VERSION%
@title %DESCRIPTION%
@doc This application implements a 3GPP SNMP manager.

==Introduction==
SigScale SNMP Collector is used by communications service providers
(CSP) to terminate the fault management (FM) north bound interfaces
(NBI) of various vendors&apos; Element Management Systems (EMS).

==Information Model==
FM events are received as SNMP (v1, v2c, v3) TRAPs which are decoded
using installed MIBs and vendor plugin modules. Vendor specific NBIs
are normalized to the information model of ITU-T
<a href="http://www.itu.int/itu-t/recommendations/rec.aspx?rec=3060">X.721</a>
/<a href="http://www.itu.int/itu-t/recommendations/rec.aspx?rec=3071">X.733</a>
and 3GPP Alarm Integration Reference Point (IRP)
(<a href="https://webapp.etsi.org/key/key.asp?GSMSpecPart1=32&amp;GSMSpecPart2=111&amp;Search=search">32.111-2</a>)
and are adapted to the Virtual Event Streaming
(<a href="https://wiki.onap.org/display/DW/VES+7.1">VES</a>) API to be
sent northbound.  The
<a href="https://wiki.onap.org/display/DW/Data+Movement+as+a+Platform+Project">
DMaaP</a> service of <a href="https://www.onap.org/">ONAP</a>
<a href="https://wiki.onap.org/display/DW/Data+Collection+Analytics+and+Events+Project">
DCAE</a> subsystem may be used to distribute fault events or they may be sent
directly to SigScale&apos;s VES Collector, part of our Fault Surveillance project.

==== 3GPP Alarm IRP and ONAP VES ====
The following table shows the mapping between the alarm attributes and VES attributes.

<p><table id="mt">
   <thead>
      <tr id="mt">
         <th id="mt">3GPP 32.111-2</th>
         <th id="mt">VNF Event Stream (VES)</th>
         <th id="mt">VES Value Type</th>
      </tr>
   </thead>
   <tbody>
       <tr id="mt">
         <td id="mt">alarmId</td>
         <td id="mt">faultFields.alarmAdditionalInformation.alarmId</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">notificationId</td>
         <td id="mt">commonEventHeader.eventId</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">notificatonType</td>
         <td id="mt">commonEventHeader.eventName</td>
         <td id="mt">notifyNewAlarm | notifyChangedAlarm | notifyClearedAlarm</td>
      </tr>
       <tr id="mt">
         <td id="mt">alarmRaisedTime</td>
         <td id="mt">commonEventHeader.startEpochMicrosec</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">alarmClearedTime</td>
         <td id="mt">commonEventHeader.lastEpochMicrosec</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">alarmChangedTime</td>
         <td id="mt">commonEventHeader.lastEpochMicrosec</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt"></td>
         <td id="mt">faultsFields.alarmCondition</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">alarmType/eventType</td>
         <td id="mt">commonEventheader.eventType</td>
         <td id="mt">e.g. "Quality of Service Alarm"</td>
      </tr>
       <tr id="mt">
         <td id="mt">probableCause</td>
         <td id="mt">faultsFields.alarmAdditionalInformation.probableCause</td>
         <td id="mt">3GPP 32.111-2 Annex B  e.g. "Alarm Indication Signal (AIS)"</td>
      </tr>
       <tr id="mt">
         <td id="mt">perceivedSeverity</td>
         <td id="mt">faultFields.eventSeverity</td>
         <td id="mt">CRITICAL | MAJOR | MINOR | WARNING | INDETERMINATE | CLEARED</td>
      </tr>
       <tr id="mt">
         <td id="mt">specificProblem</td>
         <td id="mt">faultFields.specificProblem</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">proposedRepairActions</td>
         <td id="mt">faultsFields.alarmAdditionalInformation.proposedRepairActions</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">additionalText</td>
         <td id="mt">faultsFields.alarmAdditionalInformation.additionalText</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">additionalInformation</td>
         <td id="mt">faultsFields.alarmAdditionalInformation.alarmDetails</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">ackTime</td>
         <td id="mt">faultsFields.alarmAdditionalInformation.alarmAckTime</td>
         <td id="mt"></td>
      </tr>
       <tr id="mt">
         <td id="mt">ackState</td>
         <td id="mt">faultsFields.alarmAdditionalInformation.alarmAckState</td>
         <td id="mt">acknowledged | unacknowledged</td>
      </tr>
       <tr id="mt">
         <td id="mt">objectClass</td>
         <td id="mt">faultsFields.eventSourceType</td>
         <td id="mt">Managed Object Class (MOC) name</td>
      </tr>
       <tr id="mt">
         <td id="mt">objectInstance</td>
         <td id="mt">faultsFields.alarmAdditionalInformation.objectInstance</td>
         <td id="mt">Distinguished Name (DN)</td>
      </tr>
       <tr id="mt">
         <td id="mt"></td>
         <td id="mt">commonEventHeader.sourceId</td>
         <td id="mt">Distinguished Name (DN)</td>
      </tr>
       <tr id="mt">
         <td id="mt"></td>
         <td id="mt">commonEventHeader.sourceName</td>
         <td id="mt">String</td>
      </tr>
       <tr id="mt">
         <td id="mt"></td>
         <td id="mt">commonEventHeader.reportingEntityId</td>
         <td id="mt">Distinguished Name (DN)</td>
      </tr>
       <tr id="mt">
         <td id="mt"></td>
         <td id="mt">commonEventHeader.reportingEntityName</td>
         <td id="mt">String</td>
      </tr>
       <tr id="mt">
         <td id="mt"></td>
         <td id="mt">faultsFields.eventName</td>
         <td id="mt">String</td>
      </tr>
   </tbody>
</table></p>

==Installation==
Before starting the application for the first time, {@link //mnesia/mnesia. mnesia}
should be initialized. Create a schema and start mnesia on all nodes
where the application {@link //snmp_collector. snmp_collector} application will run.

The following command will initialize {@link //snmp_collector. snmp_collector}
on the current node and create a default REST user "admin" with password "admin".

e.g &#058;
   ```
   (snmp_collector@h)1> snmp_collector_app:install().
   {ok, [httpd_group, httpd_user, alarm]}
	'''

===HTTP Authentication===
To use the {@link //inets/mod_auth. mod_auth} module for authentication
you should create necessary users in the {@link //mnesia/mnesia. mnesia}
tables it uses. All users will be added to groups specified in `require_group'
option in inets httpd confifuration.
e.g &#058;
   ```
   1> snmp_collector:add_user("john", "g2k7hyeh6qa", "en").
   {ok,{1501829429047,149}}
   2> snmp_collector:add_user("bss", "nfc9xgp32xha", "en").
   {ok,{1501829458220,157}}
   '''

==Operation==

===Graphical User Interface (GUI)===
A progressive web app (PWA) front end, built with web components,
provides a dash board, event views and MIB management.

==Configuration==

